% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{methods}
\name{predict,est.reg_hiddenNHPP-method}
\alias{predict,est.reg_hiddenNHPP-method}
\title{Prediction for regression model dependent on Poisson process}
\usage{
\S4method{predict}{est.reg_hiddenNHPP}(object, t, only.interval = TRUE,
  level = 0.05, burnIn, thinning, Lambda.mat, fun.mat,
  which.series = c("new", "current"), M2pred = 10, cand.length = 1000,
  pred.alg = c("Distribution", "simpleTrajectory", "simpleBayesTrajectory"),
  sample.length, grid = 1e-05, plot.prediction = TRUE)
}
\arguments{
\item{object}{class object of MCMC samples: "est.reg_hiddenNHPP"}

\item{t}{vector of time points to make predictions for}

\item{only.interval}{if TRUE: only calculation of prediction intervals}

\item{level}{level of the prediction intervals}

\item{burnIn}{burn-in period}

\item{thinning}{thinning rate}

\item{Lambda.mat}{matrix-wise definition of intensity rate function (makes it faster)}

\item{fun.mat}{matrix-wise definition of regression function (makes it faster)}

\item{which.series}{which series to be predicted, new one ("new") or further development of current one ("current")}

\item{M2pred}{default 10, if current series to predicted and t missing, M2pred variables will be predicted with dt of observation time points}

\item{cand.length}{length of candidate samples (if method = "vector"), for jump diffusion}

\item{pred.alg}{prediction algorithm, "Distribution", "Trajectory", "simpleTrajectory" or "simpleTrajectory"}

\item{sample.length}{length of samples to be drawn}

\item{grid}{fineness degress of approximation, for Poisson process}

\item{plot.prediction}{if TRUE, result are plotted}
}
\description{
Bayesian prediction of a regression model
  \eqn{y_i = f(t_i, N_i, \theta) + \epsilon_i}.
}
\examples{
t <- seq(0,1, by = 0.01)
cl <- set.to.class("reg_hiddenNHPP", fun = function(t, N, theta) theta[1]*t + theta[2]*N,
             parameter = list(theta = c(1,2), gamma2 = 0.1, xi = c(3, 1/4)),
             Lambda = function(t, xi) (t/xi[2])^xi[1])
data <- simulate(cl, t = t, plot.series = TRUE)
est <- estimate(cl, t, data, 1000)
plot(est)
\dontrun{
pred <- predict(est, Lambda.mat = function(t, xi) (t/xi[,2])^xi[,1],
                 fun.mat = function(t, N, theta) theta[,1]*t + theta[,2]*N)
}
pred <- predict(est, pred.alg = "simpleTrajectory", sample.length = 100)
}

